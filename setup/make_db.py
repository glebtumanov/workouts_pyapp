#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
"""

import sqlite3
import os
import sys
from datetime import datetime
from uuid import uuid4


def get_db_path():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    # –ë–î –±—É–¥–µ—Ç –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    return os.path.join(os.path.dirname(os.path.dirname(__file__)), 'workout_app.db')


def create_workout_set_table(cursor):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–ª–µ–∫—Å–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."""
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workout_sets (
            code TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            description TEXT,
            created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    ''')


def create_exercise_table(cursor):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."""
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS exercises (
            code TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            description TEXT,
            images TEXT,  -- JSON –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            video_url TEXT,
            repeat_count INTEGER NOT NULL,
            round_count INTEGER NOT NULL,
            rest_seconds INTEGER NOT NULL,
            workoutset_code TEXT NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (workoutset_code) REFERENCES workout_sets (code) ON DELETE CASCADE
        )
    ''')


def create_user_prefs_table(cursor):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_prefs (
            code TEXT PRIMARY KEY,
            default_repeat_count INTEGER NOT NULL DEFAULT 10,
            default_round_count INTEGER NOT NULL DEFAULT 3,
            default_rest_seconds INTEGER NOT NULL DEFAULT 60,
            timer_sound TEXT DEFAULT 'default',
            notifications_enabled BOOLEAN NOT NULL DEFAULT TRUE
        )
    ''')


def create_workout_log_table(cursor):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∂—É—Ä–Ω–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."""
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workout_logs (
            code TEXT PRIMARY KEY,
            date TIMESTAMP NOT NULL,
            workoutset_code TEXT NOT NULL,
            duration_seconds INTEGER NOT NULL,
            completed_exercises TEXT,  -- JSON –º–∞—Å—Å–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            FOREIGN KEY (workoutset_code) REFERENCES workout_sets (code)
        )
    ''')


def create_indexes(cursor):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    indexes = [
        'CREATE INDEX IF NOT EXISTS idx_exercises_workoutset ON exercises(workoutset_code)',
        'CREATE INDEX IF NOT EXISTS idx_workout_logs_date ON workout_logs(date DESC)',
        'CREATE INDEX IF NOT EXISTS idx_workout_logs_workoutset ON workout_logs(workoutset_code)'
    ]

    for index_sql in indexes:
        cursor.execute(index_sql)


def init_default_user_prefs(cursor):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    cursor.execute('SELECT COUNT(*) FROM user_prefs')
    if cursor.fetchone()[0] == 0:
        cursor.execute('''
            INSERT INTO user_prefs (
                code, default_repeat_count, default_round_count,
                default_rest_seconds, timer_sound, notifications_enabled
            ) VALUES (?, ?, ?, ?, ?, ?)
        ''', (str(uuid4()), 10, 3, 60, 'default', True))
        print("‚úì –°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")


def create_triggers(cursor):
    """–°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at."""
    triggers = [
        '''
        CREATE TRIGGER IF NOT EXISTS update_workout_sets_timestamp
        AFTER UPDATE ON workout_sets
        BEGIN
            UPDATE workout_sets SET updated_at = CURRENT_TIMESTAMP WHERE code = NEW.code;
        END
        ''',
        '''
        CREATE TRIGGER IF NOT EXISTS update_exercises_timestamp
        AFTER UPDATE ON exercises
        BEGIN
            UPDATE exercises SET updated_at = CURRENT_TIMESTAMP WHERE code = NEW.code;
        END
        '''
    ]

    for trigger_sql in triggers:
        cursor.execute(trigger_sql)


def create_database(force_recreate=False):
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã.

    Args:
        force_recreate: –ï—Å–ª–∏ True, —É–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–Ω–æ–≤–æ
    """
    db_path = get_db_path()

    if force_recreate and os.path.exists(db_path):
        os.remove(db_path)
        print(f"‚úì –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")

    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()

            # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            cursor.execute('PRAGMA foreign_keys = ON')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            create_workout_set_table(cursor)
            print("‚úì –¢–∞–±–ª–∏—Ü–∞ workout_sets —Å–æ–∑–¥–∞–Ω–∞")

            create_exercise_table(cursor)
            print("‚úì –¢–∞–±–ª–∏—Ü–∞ exercises —Å–æ–∑–¥–∞–Ω–∞")

            create_user_prefs_table(cursor)
            print("‚úì –¢–∞–±–ª–∏—Ü–∞ user_prefs —Å–æ–∑–¥–∞–Ω–∞")

            create_workout_log_table(cursor)
            print("‚úì –¢–∞–±–ª–∏—Ü–∞ workout_logs —Å–æ–∑–¥–∞–Ω–∞")

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            create_indexes(cursor)
            print("‚úì –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
            create_triggers(cursor)
            print("‚úì –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            init_default_user_prefs(cursor)

            conn.commit()
            print(f"\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {db_path}")

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞."""
    print("""
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python make_db.py [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --force, -f     –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
  --migrate, -m   –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è)
  --help, -h      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  python make_db.py           # –°–æ–∑–¥–∞—Ç—å –ë–î (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
  python make_db.py --force   # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î —Å –Ω—É–ª—è
  python make_db.py --migrate # –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î
    """)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    args = sys.argv[1:]

    if '--help' in args or '-h' in args:
        show_help()
        return

    force_recreate = '--force' in args or '-f' in args
    migrate = '--migrate' in args or '-m' in args

    try:
        if migrate:
            migrate_database()
        else:
            create_database(force_recreate=force_recreate)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def migrate_database():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π."""
    db_path = get_db_path()

    if not os.path.exists(db_path):
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
        create_database()
        return

    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ completed_exercises –≤ —Ç–∞–±–ª–∏—Ü–µ workout_logs
            cursor.execute("PRAGMA table_info(workout_logs)")
            columns = [column[1] for column in cursor.fetchall()]

            if 'completed_exercises' not in columns:
                print("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ completed_exercises –≤ —Ç–∞–±–ª–∏—Ü—É workout_logs...")
                cursor.execute('''
                    ALTER TABLE workout_logs
                    ADD COLUMN completed_exercises TEXT
                ''')
                conn.commit()
                print("‚úì –ü–æ–ª–µ completed_exercises —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            else:
                print("‚úì –ü–æ–ª–µ completed_exercises —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


if __name__ == '__main__':
    main()