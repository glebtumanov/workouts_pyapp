// –ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationSound {
    constructor() {
        this.audioContext = null;
        this.isSupported = typeof AudioContext !== 'undefined' || typeof webkitAudioContext !== 'undefined';
        this.initAudioContext();
    }

    initAudioContext() {
        if (!this.isSupported) return;

        try {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        } catch (e) {
            console.warn('Web Audio API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', e);
            this.isSupported = false;
        }
    }

    // –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –±–∏–ø-–∑–≤—É–∫
    createBeep(frequency = 800, duration = 200, volume = 0.1) {
        if (!this.isSupported || !this.audioContext) {
            this.fallbackNotification();
            return;
        }

        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º AudioContext –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if (this.audioContext.state === 'suspended') {
            this.audioContext.resume();
        }

        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();

        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);

        oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);
        oscillator.type = 'sine';

        gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(volume, this.audioContext.currentTime + 0.01);
        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration / 1000);

        oscillator.start(this.audioContext.currentTime);
        oscillator.stop(this.audioContext.currentTime + duration / 1000);
    }

    // –°–æ–∑–¥–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π –±–∏–ø
    createDoubleBeep() {
        this.createBeep(800, 150, 0.1);
        setTimeout(() => this.createBeep(1000, 150, 0.1), 200);
    }

    // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Audio API
    fallbackNotification() {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if ('Notification' in window && Notification.permission === 'granted') {
            new Notification('–û—Ç–¥—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!', {
                body: '–í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥—Ö–æ–¥—É',
                icon: '/static/favicon.ico',
                tag: 'workout-timer'
            });
        } else {
            // –í–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showVisualNotification();
        }
    }

    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showVisualNotification() {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ffc107;
            color: #000;
            padding: 15px 20px;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            z-index: 9999;
            font-weight: bold;
            transition: all 0.3s ease;
        `;
        notification.textContent = 'üîî –û—Ç–¥—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!';

        document.body.appendChild(notification);

        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async requestNotificationPermission() {
        if ('Notification' in window && Notification.permission === 'default') {
            const permission = await Notification.requestPermission();
            return permission === 'granted';
        }
        return Notification.permission === 'granted';
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.NotificationSound = NotificationSound;